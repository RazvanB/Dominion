// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Throne Room")]
    public partial class ThroneRoomFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "ThroneRoom.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Throne Room", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
            this.FeatureBackground();
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void FeatureBackground()
        {
#line 3
#line 4
testRunner.Given("A new game with 3 players");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player must choose which card to use Throne Room\'s effect on")]
        public virtual void PlayerMustChooseWhichCardToUseThroneRoomSEffectOn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player must choose which card to use Throne Room\'s effect on", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("Player1 has a ThroneRoom in hand instead of a Copper");
#line 8
testRunner.Given("Player1 has a Smithy in hand instead of a Copper");
#line 9
testRunner.When("Player1 plays a ThroneRoom");
#line 10
testRunner.Then("Player1 must select 1 action card");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player uses Throne Room\'s effect on a Smithy")]
        public virtual void PlayerUsesThroneRoomSEffectOnASmithy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player uses Throne Room\'s effect on a Smithy", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
testRunner.Given("Player1 has a ThroneRoom in hand instead of a Copper");
#line 14
testRunner.Given("Player1 has a Smithy in hand instead of a Copper");
#line 15
testRunner.When("Player1 plays a ThroneRoom");
#line 16
testRunner.When("Player1 selects a Smithy to ThroneRoom");
#line 17
testRunner.Then("Player1 should have 8 cards in hand");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Throne Room with no action cards in hand")]
        public virtual void PlayerPlaysThroneRoomWithNoActionCardsInHand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Throne Room with no action cards in hand", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
testRunner.Given("Player1 has a ThroneRoom in hand instead of a Copper");
#line 21
testRunner.When("Player1 plays a ThroneRoom");
#line 22
testRunner.Then("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player uses Throne Room\'s effect on a Throne Room")]
        public virtual void PlayerUsesThroneRoomSEffectOnAThroneRoom()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player uses Throne Room\'s effect on a Throne Room", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
testRunner.Given("Player1 has a hand of ThroneRoom, ThroneRoom, Smithy, Chancellor, Copper");
#line 26
testRunner.When("Player1 plays a ThroneRoom");
#line 27
testRunner.When("Player1 selects a ThroneRoom to ThroneRoom");
#line 28
testRunner.When("Player1 selects a Chancellor to ThroneRoom");
#line 29
testRunner.When("Player1 chooses No");
#line 30
testRunner.When("Player1 chooses No");
#line 31
testRunner.When("Player1 selects a Smithy to ThroneRoom");
#line 32
testRunner.Then("Player1 should have 6 cards in hand");
#line 33
testRunner.And("Player1 should have 4 to spend");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
