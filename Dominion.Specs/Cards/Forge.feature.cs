// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Forge")]
    public partial class ForgeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Forge.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Forge", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays forge and must select cards to trash")]
        public virtual void PlayerPlaysForgeAndMustSelectCardsToTrash()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays forge and must select cards to trash", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 3 players");
#line 5
testRunner.And("Player1 has a hand of Forge, Estate, Estate, Estate, Copper");
#line 6
testRunner.When("Player1 plays a Forge");
#line 7
testRunner.Then("Player1 may select up to 4 cards from their hand");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player must choose a card to gain")]
        public virtual void PlayerMustChooseACardToGain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player must choose a card to gain", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
testRunner.Given("A new game with 3 players");
#line 11
testRunner.And("Player1 has a hand of Forge, Estate, Estate, Estate, Copper");
#line 12
testRunner.When("Player1 plays a Forge");
#line 13
testRunner.And("Player1 selects cards [Estate, Estate, Estate, Copper] to trash");
#line 14
testRunner.Then("Player1 must gain a card of exact cost 6");
#line 15
testRunner.And("The trash pile should be Estate, Estate, Estate, Copper");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player gains a card")]
        public virtual void PlayerGainsACard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player gains a card", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 18
testRunner.Given("A new game with 3 players");
#line 19
testRunner.And("Player1 has a hand of Forge, Estate, Estate, Estate, Copper");
#line 20
testRunner.When("Player1 plays a Forge");
#line 21
testRunner.And("Player1 selects cards [Estate, Estate, Estate, Copper] to trash");
#line 22
testRunner.And("Player1 gains a Gold");
#line 23
testRunner.Then("Player1 should have a Gold on top of the discard pile");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player has no cards in hand to trash")]
        public virtual void PlayerHasNoCardsInHandToTrash()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player has no cards in hand to trash", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
testRunner.Given("A new game with 3 players");
#line 27
testRunner.And("Player1 has a hand of Forge");
#line 28
testRunner.When("Player1 plays a Forge");
#line 29
testRunner.Then("Player1 must gain a card of exact cost 0");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("There is no card of appropriate cost to gain")]
        public virtual void ThereIsNoCardOfAppropriateCostToGain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("There is no card of appropriate cost to gain", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
testRunner.Given("A new game with 3 players");
#line 33
testRunner.And("Player1 has a hand of Forge, Silver, Silver, Estate, Estate");
#line 34
testRunner.When("Player1 plays a Forge");
#line 35
testRunner.And("Player1 selects cards [Silver, Silver, Estate, Estate] to trash");
#line 36
testRunner.Then("All actions should be resolved");
#line 37
testRunner.And("The trash pile should be Silver, Silver, Estate, Estate");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
