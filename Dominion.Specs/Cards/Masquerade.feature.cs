// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Masquerade")]
    public partial class MasqueradeFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Masquerade.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Masquerade", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Players are expected to choose a card to pass when Masquerade is played")]
        public virtual void PlayersAreExpectedToChooseACardToPassWhenMasqueradeIsPlayed()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Players are expected to choose a card to pass when Masquerade is played", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 3 players");
#line 5
testRunner.And("Player1 has a Masquerade in hand instead of a Copper");
#line 6
testRunner.When("Player1 plays a Masquerade");
#line 7
testRunner.Then("Player1 should have 6 cards in hand");
#line 8
testRunner.And("Player1 must select a card to pass");
#line 9
testRunner.And("Player2 must select a card to pass");
#line 10
testRunner.And("Player3 must select a card to pass");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cards are not exchanged until all players have made their selections")]
        public virtual void CardsAreNotExchangedUntilAllPlayersHaveMadeTheirSelections()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cards are not exchanged until all players have made their selections", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
testRunner.Given("A new game with 3 players");
#line 14
testRunner.And("Player1 has a hand of Masquerade, Curse, Curse, Curse, Curse");
#line 15
testRunner.And("Player1 has a deck of Curse, Curse, Curse, Curse, Curse");
#line 16
testRunner.And("Player2 has a hand of Estate, Estate, Estate, Estate, Estate");
#line 17
testRunner.And("Player3 has a hand of Silver, Silver, Silver, Silver, Silver");
#line 18
testRunner.When("Player1 plays a Masquerade");
#line 19
testRunner.And("Player1 selects a Curse to pass");
#line 20
testRunner.And("Player3 selects a Silver to pass");
#line 21
testRunner.Then("Player1 should have a hand of Curse, Curse, Curse, Curse, Curse, Curse");
#line 22
testRunner.And("Player2 should have a hand of Estate, Estate, Estate, Estate, Estate");
#line 23
testRunner.And("Player3 should have a hand of Silver, Silver, Silver, Silver, Silver");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Cards are exchanged once all players have made their selections")]
        public virtual void CardsAreExchangedOnceAllPlayersHaveMadeTheirSelections()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Cards are exchanged once all players have made their selections", ((string[])(null)));
#line 25
this.ScenarioSetup(scenarioInfo);
#line 26
testRunner.Given("A new game with 3 players");
#line 27
testRunner.And("Player1 has a hand of Masquerade, Curse, Curse, Curse, Curse");
#line 28
testRunner.And("Player1 has a deck of Curse, Curse, Curse, Curse, Curse");
#line 29
testRunner.And("Player2 has a hand of Estate, Estate, Estate, Estate, Estate");
#line 30
testRunner.And("Player3 has a hand of Silver, Silver, Silver, Silver, Silver");
#line 31
testRunner.When("Player1 plays a Masquerade");
#line 32
testRunner.And("Player1 selects a Curse to pass");
#line 33
testRunner.And("Player2 selects a Estate to pass");
#line 34
testRunner.And("Player3 selects a Silver to pass");
#line 35
testRunner.Then("Player1 should have a hand of Curse, Curse, Curse, Curse, Curse, Silver");
#line 36
testRunner.Then("Player2 should have a hand of Estate, Estate, Estate, Estate, Curse");
#line 37
testRunner.Then("Player3 should have a hand of Silver, Silver, Silver, Silver, Estate");
#line 38
testRunner.Then("Player1 may select up to 1 card from their hand to trash");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player trashes a card")]
        public virtual void PlayerTrashesACard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player trashes a card", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
testRunner.Given("A new game with 3 players");
#line 42
testRunner.And("Player1 has a hand of Masquerade, Curse, Curse, Copper, Copper");
#line 43
testRunner.And("Player1 has a deck of Copper, Copper, Copper, Copper, Copper");
#line 44
testRunner.And("Player2 has a hand of Estate, Estate, Estate, Estate, Estate");
#line 45
testRunner.And("Player3 has a hand of Silver, Silver, Silver, Silver, Silver");
#line 46
testRunner.When("Player1 plays a Masquerade");
#line 47
testRunner.And("Player1 selects a Curse to pass");
#line 48
testRunner.And("Player2 selects a Estate to pass");
#line 49
testRunner.And("Player3 selects a Silver to pass");
#line 50
testRunner.And("Player1 selects a Curse to trash");
#line 51
testRunner.Then("Player1 should have a hand of Copper, Copper, Copper, Copper, Silver");
#line 52
testRunner.Then("Player2 should have a hand of Estate, Estate, Estate, Estate, Curse");
#line 53
testRunner.Then("Player3 should have a hand of Silver, Silver, Silver, Silver, Estate");
#line 54
testRunner.Then("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Throne Room a Masquerade")]
        public virtual void ThroneRoomAMasquerade()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Throne Room a Masquerade", ((string[])(null)));
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
testRunner.Given("A new game with 3 players");
#line 58
testRunner.And("Player1 has a hand of Masquerade, ThroneRoom, Curse, Copper, Copper");
#line 59
testRunner.When("Player1 plays a ThroneRoom");
#line 60
testRunner.When("Player1 selects a Masquerade to ThroneRoom");
#line 61
testRunner.Then("Player1 should have 5 cards in hand");
#line 62
testRunner.And("Player1 must select a card to pass");
#line 63
testRunner.And("Player2 must select a card to pass");
#line 64
testRunner.And("Player3 must select a card to pass");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
