// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Spy")]
    public partial class SpyFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Spy.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Spy", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Spy, draws a card, gains an action and then must choose whether card" +
            "s are discarded")]
        public virtual void PlayerPlaysSpyDrawsACardGainsAnActionAndThenMustChooseWhetherCardsAreDiscarded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Spy, draws a card, gains an action and then must choose whether card" +
                    "s are discarded", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 2 players");
#line 5
testRunner.And("Player1 has a Spy in hand instead of a Copper");
#line 6
testRunner.And("Player2 has a deck of Estate, Copper, Estate, Copper, Copper");
#line 7
testRunner.When("Player1 plays a Spy");
#line 8
testRunner.Then("Estate should be revealed to Player1");
#line 9
testRunner.And("Player1 must choose whether to make Player2 discard it (Yes or No)");
#line 10
testRunner.And("Player1 should have 5 cards in hand");
#line 11
testRunner.And("Player1 should have 1 remaining action");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Spy but other player nullifies with moat - player chooses whether hi" +
            "s own card is discarded")]
        public virtual void PlayerPlaysSpyButOtherPlayerNullifiesWithMoat_PlayerChoosesWhetherHisOwnCardIsDiscarded()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Spy but other player nullifies with moat - player chooses whether hi" +
                    "s own card is discarded", ((string[])(null)));
#line 13
this.ScenarioSetup(scenarioInfo);
#line 14
testRunner.Given("A new game with 2 players");
#line 15
testRunner.And("Player1 has a Spy in hand instead of a Copper");
#line 16
testRunner.And("Player2 has a Moat in hand instead of a Copper");
#line 17
testRunner.And("Player1 has a deck of Copper, Silver, Estate, Copper, Copper");
#line 18
testRunner.When("Player1 plays a Spy");
#line 19
testRunner.And("Player2 reveals Moat");
#line 20
testRunner.And("Player2 is done with reactions");
#line 21
testRunner.Then("Silver should be revealed to Player1");
#line 22
testRunner.And("Player1 must choose whether to discard it (Yes or No)");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Spy, makes opponent discard the revealed card and then keeps his own" +
            " card")]
        public virtual void PlayerPlaysSpyMakesOpponentDiscardTheRevealedCardAndThenKeepsHisOwnCard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Spy, makes opponent discard the revealed card and then keeps his own" +
                    " card", ((string[])(null)));
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
testRunner.Given("A new game with 2 players");
#line 26
testRunner.And("Player1 has a Spy in hand instead of a Copper");
#line 27
testRunner.And("Player1 has a deck of Copper, Silver, Estate, Copper, Copper");
#line 28
testRunner.And("Player2 has a deck of Estate, Copper, Estate, Copper, Copper");
#line 29
testRunner.When("Player1 plays a Spy");
#line 30
testRunner.And("Player1 chooses to make Player2 discard the Estate (Yes)");
#line 31
testRunner.Then("Player2 should have an Estate on top of the discard pile");
#line 32
testRunner.And("Silver should be revealed to Player1");
#line 33
testRunner.When("Player1 chooses to keep it (No)");
#line 34
testRunner.Then("Player1 should have a deck of: Silver, Estate, Copper, Copper");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Spy, neither he nor his opponent have any deck (or discards)")]
        public virtual void PlayerPlaysSpyNeitherHeNorHisOpponentHaveAnyDeckOrDiscards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Spy, neither he nor his opponent have any deck (or discards)", ((string[])(null)));
#line 36
this.ScenarioSetup(scenarioInfo);
#line 37
testRunner.Given("A new game with 2 players");
#line 38
testRunner.And("Player1 has a Spy in hand instead of a Copper");
#line 39
testRunner.And("Player1 has an empty deck");
#line 40
testRunner.And("Player2 has an empty deck");
#line 41
testRunner.When("Player1 plays a Spy");
#line 42
testRunner.Then("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
