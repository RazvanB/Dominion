// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Ambassador")]
    public partial class AmbassadorFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Ambassador.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Ambassador", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Ambassador and must select a card to reveal")]
        public virtual void PlayerPlaysAmbassadorAndMustSelectACardToReveal()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Ambassador and must select a card to reveal", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 3 players");
#line 5
testRunner.And("Player1 has an Ambassador in hand instead of a Copper");
#line 6
testRunner.When("Player1 plays an Ambassador");
#line 7
testRunner.Then("Player1 must select a card to reveal");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Ambassador and selects a card")]
        public virtual void PlayerPlaysAmbassadorAndSelectsACard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Ambassador and selects a card", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
testRunner.Given("A new game with 3 players");
#line 11
testRunner.And("Player1 has a hand of Ambassador, Copper, Copper, Estate, Curse");
#line 12
testRunner.When("Player1 plays an Ambassador");
#line 13
testRunner.And("Player1 selects a Curse to reveal");
#line 14
testRunner.Then("Player1 may select up to 2 Curse cards from their hand");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Ambassador and selects one curse")]
        public virtual void PlayerPlaysAmbassadorAndSelectsOneCurse()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Ambassador and selects one curse", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
testRunner.Given("A new game with 3 players");
#line 18
testRunner.And("Player1 has a hand of Ambassador, Copper, Copper, Estate, Curse");
#line 19
testRunner.When("Player1 plays an Ambassador");
#line 20
testRunner.And("Player1 selects a Curse to reveal");
#line 21
testRunner.And("Player1 selects a Curse to return to the supply");
#line 22
testRunner.Then("Player1 should have 3 cards in hand");
#line 23
testRunner.And("Player2 should have a Curse on top of the discard pile");
#line 24
testRunner.And("Player3 should have a Curse on top of the discard pile");
#line 25
testRunner.And("There should be 19 Curse available to buy");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Ambassador and selects two curses")]
        public virtual void PlayerPlaysAmbassadorAndSelectsTwoCurses()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Ambassador and selects two curses", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
testRunner.Given("A new game with 3 players");
#line 29
testRunner.And("Player1 has a hand of Ambassador, Copper, Copper, Curse, Curse");
#line 30
testRunner.When("Player1 plays an Ambassador");
#line 31
testRunner.And("Player1 selects a Curse to reveal");
#line 32
testRunner.And("Player1 selects cards [Curse, Curse] to return to the supply");
#line 33
testRunner.Then("Player1 should have 2 cards in hand");
#line 34
testRunner.And("Player2 should have a Curse on top of the discard pile");
#line 35
testRunner.And("Player3 should have a Curse on top of the discard pile");
#line 36
testRunner.And("There should be 20 Curse available to buy");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Ambassador but doesn\'t want to return anything - the other players s" +
            "till gain a copy.")]
        public virtual void PlayerPlaysAmbassadorButDoesnTWantToReturnAnything_TheOtherPlayersStillGainACopy_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Ambassador but doesn\'t want to return anything - the other players s" +
                    "till gain a copy.", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
testRunner.Given("A new game with 3 players");
#line 40
testRunner.And("Player1 has a hand of Ambassador, Gold, Gold, Gold, Gold");
#line 41
testRunner.When("Player1 plays an Ambassador");
#line 42
testRunner.And("Player1 selects a Gold to reveal");
#line 43
testRunner.And("Player1 selects nothing to return to the supply");
#line 44
testRunner.Then("Player1 should have 4 cards in hand");
#line 45
testRunner.And("Player2 should have a Gold on top of the discard pile");
#line 46
testRunner.And("Player3 should have a Gold on top of the discard pile");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Ambassador with nothing in hand")]
        public virtual void PlayerPlaysAmbassadorWithNothingInHand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Ambassador with nothing in hand", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
testRunner.Given("A new game with 3 players");
#line 50
testRunner.And("Player1 has a hand of Ambassador");
#line 51
testRunner.When("Player1 plays an Ambassador");
#line 52
testRunner.Then("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
