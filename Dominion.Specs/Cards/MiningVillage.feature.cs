// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Mining Village")]
    public partial class MiningVillageFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "MiningVillage.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Mining Village", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player must choose whether to trash Mining Village")]
        public virtual void PlayerMustChooseWhetherToTrashMiningVillage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player must choose whether to trash Mining Village", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 3 players");
#line 5
testRunner.And("Player1 has a MiningVillage in hand instead of a Copper");
#line 6
testRunner.When("Player1 plays a MiningVillage");
#line 7
testRunner.Then("Player1 must choose whether to trash MiningVillage (Yes or No)");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player does not trash Mining Village")]
        public virtual void PlayerDoesNotTrashMiningVillage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player does not trash Mining Village", ((string[])(null)));
#line 9
this.ScenarioSetup(scenarioInfo);
#line 10
testRunner.Given("A new game with 3 players");
#line 11
testRunner.And("Player1 has a MiningVillage in hand instead of a Copper");
#line 12
testRunner.When("Player1 plays a MiningVillage");
#line 13
testRunner.And("Player1 chooses to not to trash MiningVillage (No)");
#line 14
testRunner.Then("Player1 should have 0 to spend");
#line 15
testRunner.And("Player1 should have 5 cards in hand");
#line 16
testRunner.And("Player1 should have 2 actions remaining");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player trashes Mining Village")]
        public virtual void PlayerTrashesMiningVillage()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player trashes Mining Village", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
testRunner.Given("A new game with 3 players");
#line 20
testRunner.And("Player1 has a MiningVillage in hand instead of a Copper");
#line 21
testRunner.When("Player1 plays a MiningVillage");
#line 22
testRunner.And("Player1 chooses to trash MiningVillage (Yes)");
#line 23
testRunner.Then("Player1 should have 2 to spend");
#line 24
testRunner.And("Player1 should have 5 cards in hand");
#line 25
testRunner.And("Player1 should have 2 actions remaining");
#line 26
testRunner.And("There should be a MiningVillage on top of the trash pile");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Using Throne Room on a Mining Village and then trashing should not prompt to tras" +
            "h a second time")]
        public virtual void UsingThroneRoomOnAMiningVillageAndThenTrashingShouldNotPromptToTrashASecondTime()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Using Throne Room on a Mining Village and then trashing should not prompt to tras" +
                    "h a second time", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
testRunner.Given("A new game with 3 players");
#line 30
testRunner.And("Player1 has a hand of ThroneRoom, MiningVillage, Copper, Copper, Estate");
#line 31
testRunner.When("Player1 plays a ThroneRoom");
#line 32
testRunner.When("Player1 selects a MiningVillage to ThroneRoom");
#line 33
testRunner.And("Player1 chooses to trash MiningVillage (Yes)");
#line 34
testRunner.Then("All actions should be resolved");
#line 35
testRunner.And("Player1 should have 5 cards in hand");
#line 36
testRunner.And("Player1 should have 4 actions remaining");
#line 37
testRunner.And("There should be a MiningVillage on top of the trash pile");
#line 38
testRunner.And("Player1 should have 2 to spend");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Can trash a Mining Village revealed via a Golem")]
        public virtual void CanTrashAMiningVillageRevealedViaAGolem()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Can trash a Mining Village revealed via a Golem", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
testRunner.Given("A new game with 3 players");
#line 42
testRunner.And("Player1 has a Golem in hand instead of a Copper");
#line 43
testRunner.And("Player1 has a deck of MiningVillage, Copper, Copper, Copper, Copper");
#line 44
testRunner.When("Player1 plays a Golem");
#line 45
testRunner.And("Player1 chooses to trash MiningVillage (Yes)");
#line 46
testRunner.Then("Player1 should have 2 to spend");
#line 47
testRunner.And("Player1 should have 5 cards in hand");
#line 48
testRunner.And("Player1 should have 2 actions remaining");
#line 49
testRunner.And("There should be a MiningVillage on top of the trash pile");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
