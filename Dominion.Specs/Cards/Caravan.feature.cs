// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:2.0.50727.4952
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Caravan")]
    public partial class CaravanFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Caravan.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Caravan", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Caravan Initial Effect")]
        public virtual void CaravanInitialEffect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Caravan Initial Effect", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 2 players");
#line 5
testRunner.And("Player1 has a Caravan in hand instead of a Copper");
#line 6
testRunner.When("Player1 plays a Caravan");
#line 7
testRunner.Then("Player1 should have 1 remaining action");
#line 8
testRunner.And("Player1 should have 5 cards in hand");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Caravan Second Turn Effect")]
        public virtual void CaravanSecondTurnEffect()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Caravan Second Turn Effect", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
testRunner.Given("A new game with 2 players");
#line 12
testRunner.And("Player1 has a Caravan in hand instead of a Copper");
#line 13
testRunner.When("Player1 plays a Caravan");
#line 14
testRunner.And("Player1 ends their turn");
#line 15
testRunner.And("Player2 ends their turn");
#line 16
testRunner.Then("Player1 is the active player");
#line 17
testRunner.And("Player1 should have 1 remaining action");
#line 18
testRunner.And("Player1 should have 6 cards in hand");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Caravan is not Discarded Immediately")]
        public virtual void CaravanIsNotDiscardedImmediately()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Caravan is not Discarded Immediately", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
testRunner.Given("A new game with 2 players");
#line 22
testRunner.And("Player1 has a Caravan in hand instead of a Copper");
#line 23
testRunner.When("Player1 plays a Caravan");
#line 24
testRunner.And("Player1 ends their turn");
#line 25
testRunner.Then("Player1 should have 0 cards in the discard pile");
#line 26
testRunner.And("Player1 should have a deck of 4 cards");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Caravan is Discarded After Second Turn")]
        public virtual void CaravanIsDiscardedAfterSecondTurn()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Caravan is Discarded After Second Turn", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
testRunner.Given("A new game with 2 players");
#line 30
testRunner.And("Player1 has a Caravan in hand instead of a Copper");
#line 31
testRunner.When("Player1 plays a Caravan");
#line 32
testRunner.And("Player1 ends their turn");
#line 33
testRunner.And("Player2 ends their turn");
#line 34
testRunner.And("Player1 ends their turn");
#line 35
testRunner.Then("Player1 should have 0 cards in the discard pile");
#line 36
testRunner.And("Player1 should have a deck of 5 cards");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Caravan Has No Effect After Two Turns")]
        public virtual void CaravanHasNoEffectAfterTwoTurns()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Caravan Has No Effect After Two Turns", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
testRunner.Given("A new game with 2 players");
#line 40
testRunner.And("Player1 has a Caravan in hand instead of a Copper");
#line 41
testRunner.When("Player1 plays a Caravan");
#line 42
testRunner.And("Player1 ends their turn");
#line 43
testRunner.And("Player2 ends their turn");
#line 44
testRunner.And("Player1 ends their turn");
#line 45
testRunner.And("Player2 ends their turn");
#line 46
testRunner.Then("Player1 is the active player");
#line 47
testRunner.And("Player1 should have 1 remaining action");
#line 48
testRunner.And("Player1 should have 0 to spend");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
