// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Thief")]
    public partial class ThiefFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Thief.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Thief", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays thief but opponent has no treasure")]
        public virtual void PlayerPlaysThiefButOpponentHasNoTreasure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays thief but opponent has no treasure", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 2 players");
#line 5
testRunner.And("Player1 has a Thief in hand instead of a Copper");
#line 6
testRunner.And("Player2 has a deck of Estate, Estate, Copper, Copper, Copper");
#line 7
testRunner.When("Player1 plays a Thief");
#line 8
testRunner.Then("Player2 should have 2 cards in the discard pile");
#line 9
testRunner.And("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays thief and opponent has one treasure")]
        public virtual void PlayerPlaysThiefAndOpponentHasOneTreasure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays thief and opponent has one treasure", ((string[])(null)));
#line 11
this.ScenarioSetup(scenarioInfo);
#line 12
testRunner.Given("A new game with 2 players");
#line 13
testRunner.And("Player1 has a Thief in hand instead of a Copper");
#line 14
testRunner.And("Player2 has a deck of Estate, Copper, Estate, Copper, Copper");
#line 15
testRunner.When("Player1 plays a Thief");
#line 16
testRunner.Then("Player1 must choose whether to gain the Copper (Yes or No)");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays thief, opponent has one treasure and player gains it")]
        public virtual void PlayerPlaysThiefOpponentHasOneTreasureAndPlayerGainsIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays thief, opponent has one treasure and player gains it", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
testRunner.Given("A new game with 2 players");
#line 20
testRunner.And("Player1 has a Thief in hand instead of a Copper");
#line 21
testRunner.And("Player2 has a deck of Estate, Copper, Estate, Copper, Copper");
#line 22
testRunner.When("Player1 plays a Thief");
#line 23
testRunner.And("Player1 chooses to gain the Copper (Yes)");
#line 24
testRunner.Then("Player1 should have a Copper on top of the discard pile");
#line 25
testRunner.Then("Player2 should have a Estate on top of the discard pile");
#line 26
testRunner.And("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays thief, opponent has one treasure and player trashes it")]
        public virtual void PlayerPlaysThiefOpponentHasOneTreasureAndPlayerTrashesIt()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays thief, opponent has one treasure and player trashes it", ((string[])(null)));
#line 28
this.ScenarioSetup(scenarioInfo);
#line 29
testRunner.Given("A new game with 2 players");
#line 30
testRunner.And("Player1 has a Thief in hand instead of a Copper");
#line 31
testRunner.And("Player2 has a deck of Estate, Copper, Estate, Copper, Copper");
#line 32
testRunner.When("Player1 plays a Thief");
#line 33
testRunner.And("Player1 chooses to trash the Copper (No)");
#line 34
testRunner.Then("There should be a Copper on top of the trash pile");
#line 35
testRunner.Then("Player2 should have a Estate on top of the discard pile");
#line 36
testRunner.And("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays thief, opponent has two treasure")]
        public virtual void PlayerPlaysThiefOpponentHasTwoTreasure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays thief, opponent has two treasure", ((string[])(null)));
#line 38
this.ScenarioSetup(scenarioInfo);
#line 39
testRunner.Given("A new game with 2 players");
#line 40
testRunner.And("Player1 has a Thief in hand instead of a Copper");
#line 41
testRunner.And("Player2 has a deck of Silver, Copper, Estate, Copper, Copper");
#line 42
testRunner.When("Player1 plays a Thief");
#line 43
testRunner.Then("Player1 must select a revealed card from: Silver, Copper");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays thief, opponent has two treasure, player chooses one")]
        public virtual void PlayerPlaysThiefOpponentHasTwoTreasurePlayerChoosesOne()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays thief, opponent has two treasure, player chooses one", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
testRunner.Given("A new game with 2 players");
#line 47
testRunner.And("Player1 has a Thief in hand instead of a Copper");
#line 48
testRunner.And("Player2 has a deck of Silver, Copper, Estate, Copper, Copper");
#line 49
testRunner.When("Player1 plays a Thief");
#line 50
testRunner.When("Player1 selects Silver from the revealed cards");
#line 51
testRunner.Then("Player1 must choose whether to gain the Silver (Yes or No)");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays thief, multiple opponents have treasure")]
        public virtual void PlayerPlaysThiefMultipleOpponentsHaveTreasure()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays thief, multiple opponents have treasure", ((string[])(null)));
#line 53
this.ScenarioSetup(scenarioInfo);
#line 54
testRunner.Given("A new game with 3 players");
#line 55
testRunner.And("Player1 has a Thief in hand instead of a Copper");
#line 56
testRunner.And("Player2 has a deck of Silver, Copper, Estate, Copper, Copper");
#line 57
testRunner.And("Player3 has a deck of Gold, Copper, Estate, Copper, Copper");
#line 58
testRunner.When("Player1 plays a Thief");
#line 59
testRunner.And("Player1 selects Silver from the revealed cards");
#line 60
testRunner.And("Player1 chooses to gain the Silver (Yes)");
#line 61
testRunner.Then("Player1 must select a revealed card from: Gold, Copper");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
