// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Minion")]
    public partial class MinionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Minion.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Minion", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Minion and must choose whether to discard his hand")]
        public virtual void PlayerPlaysMinionAndMustChooseWhetherToDiscardHisHand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Minion and must choose whether to discard his hand", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 3 players");
#line 5
testRunner.And("Player1 has a Minion in hand instead of a Copper");
#line 6
testRunner.When("Player1 plays a Minion");
#line 7
testRunner.Then("Player1 must choose whether to discard his hand (Yes or No)");
#line 8
testRunner.And("Player1 should have 1 action remaining");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Minion and chooses to gain 2 spend")]
        public virtual void PlayerPlaysMinionAndChoosesToGain2Spend()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Minion and chooses to gain 2 spend", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
testRunner.Given("A new game with 3 players");
#line 12
testRunner.And("Player1 has a Minion in hand instead of a Copper");
#line 13
testRunner.When("Player1 plays a Minion");
#line 14
testRunner.And("Player1 chooses to gain 2 spend (No)");
#line 15
testRunner.Then("Player1 should have 2 to spend");
#line 16
testRunner.And("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Minion and chooses to discard his hand, all other players must disca" +
            "rd their hands")]
        public virtual void PlayerPlaysMinionAndChoosesToDiscardHisHandAllOtherPlayersMustDiscardTheirHands()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Minion and chooses to discard his hand, all other players must disca" +
                    "rd their hands", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
testRunner.Given("A new game with 3 players");
#line 20
testRunner.And("Player1 has a Minion in hand instead of a Copper");
#line 21
testRunner.When("Player1 plays a Minion");
#line 22
testRunner.And("Player1 chooses to discard his hand (Yes)");
#line 23
testRunner.Then("Player1 should have 4 cards in hand");
#line 24
testRunner.And("Player2 should have 4 cards in hand");
#line 25
testRunner.And("Player3 should have 4 cards in hand");
#line 26
testRunner.And("Player1 should have 4 cards in the discard pile");
#line 27
testRunner.And("Player2 should have 5 cards in the discard pile");
#line 28
testRunner.And("Player3 should have 5 cards in the discard pile");
#line 29
testRunner.And("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Minion and chooses to discard his hand but the other player only has" +
            " 4 cards in hand")]
        public virtual void PlayerPlaysMinionAndChoosesToDiscardHisHandButTheOtherPlayerOnlyHas4CardsInHand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Minion and chooses to discard his hand but the other player only has" +
                    " 4 cards in hand", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
testRunner.Given("A new game with 2 players");
#line 33
testRunner.And("Player1 has a Minion in hand instead of a Copper");
#line 34
testRunner.And("Player2 has a hand of Silver, Silver, Silver, Silver");
#line 35
testRunner.When("Player1 plays a Minion");
#line 36
testRunner.And("Player1 chooses to discard his hand (Yes)");
#line 37
testRunner.Then("Player1 should have 4 cards in hand");
#line 38
testRunner.And("Player1 should have 4 cards in the discard pile");
#line 39
testRunner.And("Player2 should have a hand of Silver, Silver, Silver, Silver");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Minion and opponents must choose whether to Moat")]
        public virtual void PlayerPlaysMinionAndOpponentsMustChooseWhetherToMoat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Minion and opponents must choose whether to Moat", ((string[])(null)));
#line 41
this.ScenarioSetup(scenarioInfo);
#line 42
testRunner.Given("A new game with 3 players");
#line 43
testRunner.And("Player1 has a Minion in hand instead of a Copper");
#line 44
testRunner.And("Player2 has a Moat in hand instead of a Copper");
#line 45
testRunner.When("Player1 plays a Minion");
#line 46
testRunner.Then("Player2 may reveal a reaction");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Minion, opponent moats and then player must choose whether to discar" +
            "d")]
        public virtual void PlayerPlaysMinionOpponentMoatsAndThenPlayerMustChooseWhetherToDiscard()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Minion, opponent moats and then player must choose whether to discar" +
                    "d", ((string[])(null)));
#line 48
this.ScenarioSetup(scenarioInfo);
#line 49
testRunner.Given("A new game with 3 players");
#line 50
testRunner.And("Player1 has a Minion in hand instead of a Copper");
#line 51
testRunner.And("Player2 has a Moat in hand instead of a Copper");
#line 52
testRunner.When("Player1 plays a Minion");
#line 53
testRunner.And("Player2 reveals Moat");
#line 54
testRunner.And("Player2 is done with reactions");
#line 55
testRunner.Then("Player1 must choose whether to discard his hand (Yes or No)");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Minion, opponent moats and then player chooses to discard anyway")]
        public virtual void PlayerPlaysMinionOpponentMoatsAndThenPlayerChoosesToDiscardAnyway()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Minion, opponent moats and then player chooses to discard anyway", ((string[])(null)));
#line 57
this.ScenarioSetup(scenarioInfo);
#line 58
testRunner.Given("A new game with 3 players");
#line 59
testRunner.And("Player1 has a Minion in hand instead of a Copper");
#line 60
testRunner.And("Player2 has a Moat in hand instead of a Copper");
#line 61
testRunner.When("Player1 plays a Minion");
#line 62
testRunner.And("Player2 reveals Moat");
#line 63
testRunner.And("Player2 is done with reactions");
#line 64
testRunner.And("Player1 chooses to discard his hand (Yes)");
#line 65
testRunner.Then("Player1 should have 4 cards in hand");
#line 66
testRunner.And("Player2 should have 5 cards in hand");
#line 67
testRunner.And("Player1 should have 4 cards in the discard pile");
#line 68
testRunner.And("Player2 should have 0 cards in the discard pile");
#line 69
testRunner.And("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
