// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Transmute")]
    public partial class TransmuteFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Transmute.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Transmute", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player transmutes an estate into gold")]
        public virtual void PlayerTransmutesAnEstateIntoGold()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player transmutes an estate into gold", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 2 players");
#line 5
testRunner.And("Player1 has a hand of Transmute, Estate, Copper, Copper, Copper");
#line 6
testRunner.When("Player1 plays a Transmute");
#line 7
testRunner.And("Player1 selects an Estate to transmute");
#line 8
testRunner.Then("Player1 should have 3 cards in hand");
#line 9
testRunner.And("Player1 should have a Gold on top of the discard pile");
#line 10
testRunner.And("There should be an Estate on top of the trash pile");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player transmutes a copper into a transmute")]
        public virtual void PlayerTransmutesACopperIntoATransmute()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player transmutes a copper into a transmute", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
testRunner.Given("A new game with 2 players");
#line 14
testRunner.And("Player1 has a hand of Transmute, Estate, Copper, Copper, Copper");
#line 15
testRunner.And("Transmute is available to buy");
#line 16
testRunner.When("Player1 plays a Transmute");
#line 17
testRunner.And("Player1 selects a Copper to transmute");
#line 18
testRunner.Then("Player1 should have 3 cards in hand");
#line 19
testRunner.And("Player1 should have a Transmute on top of the discard pile");
#line 20
testRunner.And("There should be a Copper on top of the trash pile");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player transmutes a transmute into a duchy")]
        public virtual void PlayerTransmutesATransmuteIntoADuchy()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player transmutes a transmute into a duchy", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
testRunner.Given("A new game with 2 players");
#line 24
testRunner.And("Player1 has a hand of Transmute, Transmute, Copper, Copper, Copper");
#line 25
testRunner.When("Player1 plays a Transmute");
#line 26
testRunner.And("Player1 selects a Transmute to transmute");
#line 27
testRunner.Then("Player1 should have 3 cards in hand");
#line 28
testRunner.And("Player1 should have a Duchy on top of the discard pile");
#line 29
testRunner.And("There should be a Transmute on top of the trash pile");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player transmutes a great hall into a duchy and a gold")]
        public virtual void PlayerTransmutesAGreatHallIntoADuchyAndAGold()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player transmutes a great hall into a duchy and a gold", ((string[])(null)));
#line 31
this.ScenarioSetup(scenarioInfo);
#line 32
testRunner.Given("A new game with 2 players");
#line 33
testRunner.And("Player1 has a hand of Transmute, GreatHall, Copper, Copper, Copper");
#line 34
testRunner.When("Player1 plays a Transmute");
#line 35
testRunner.And("Player1 selects a GreatHall to transmute");
#line 36
testRunner.Then("Player1 should have 3 cards in hand");
#line 37
testRunner.And("Player1 should have a discard pile of Duchy, Gold");
#line 38
testRunner.And("There should be a GreatHall on top of the trash pile");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player transmutes a curse into nothing")]
        public virtual void PlayerTransmutesACurseIntoNothing()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player transmutes a curse into nothing", ((string[])(null)));
#line 40
this.ScenarioSetup(scenarioInfo);
#line 41
testRunner.Given("A new game with 2 players");
#line 42
testRunner.And("Player1 has a hand of Transmute, Curse, Copper, Copper, Copper");
#line 43
testRunner.When("Player1 plays a Transmute");
#line 44
testRunner.And("Player1 selects a Curse to transmute");
#line 45
testRunner.Then("Player1 should have 3 cards in hand");
#line 46
testRunner.And("Player1 should have 0 cards in the discard pile");
#line 47
testRunner.And("There should be a Curse on top of the trash pile");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays transmute with no other cards in hand")]
        public virtual void PlayerPlaysTransmuteWithNoOtherCardsInHand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays transmute with no other cards in hand", ((string[])(null)));
#line 49
this.ScenarioSetup(scenarioInfo);
#line 50
testRunner.Given("A new game with 2 players");
#line 51
testRunner.And("Player1 has a hand of Transmute");
#line 52
testRunner.When("Player1 plays a Transmute");
#line 53
testRunner.Then("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
