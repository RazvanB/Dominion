// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Ironworks")]
    public partial class IronworksFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Ironworks.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Ironworks", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player play Ironworks and must choose a card to gain")]
        public virtual void PlayerPlayIronworksAndMustChooseACardToGain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player play Ironworks and must choose a card to gain", ((string[])(null)));
#line 4
this.ScenarioSetup(scenarioInfo);
#line 5
testRunner.Given("A new game with 3 players");
#line 6
testRunner.And("Player1 has a Ironworks in hand instead of a Copper");
#line 7
testRunner.When("Player1 plays a Ironworks");
#line 8
testRunner.Then("Player1 must gain a card of cost 4 or less");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player play Ironworks and gains a Silver")]
        public virtual void PlayerPlayIronworksAndGainsASilver()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player play Ironworks and gains a Silver", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
testRunner.Given("A new game with 3 players");
#line 12
testRunner.And("Player1 has a Ironworks in hand instead of a Copper");
#line 13
testRunner.When("Player1 plays a Ironworks");
#line 14
testRunner.When("Player1 gains a Silver");
#line 15
testRunner.Then("Player1 should have a Silver on top of the discard pile");
#line 16
testRunner.And("Player1 should have 1 to spend");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player play Ironworks and gains an Estate")]
        public virtual void PlayerPlayIronworksAndGainsAnEstate()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player play Ironworks and gains an Estate", ((string[])(null)));
#line 18
this.ScenarioSetup(scenarioInfo);
#line 19
testRunner.Given("A new game with 3 players");
#line 20
testRunner.And("Player1 has a Ironworks in hand instead of a Copper");
#line 21
testRunner.When("Player1 plays a Ironworks");
#line 22
testRunner.When("Player1 gains an Estate");
#line 23
testRunner.Then("Player1 should have a Estate on top of the discard pile");
#line 24
testRunner.And("Player1 should have 5 cards in hand");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player play Ironworks and gains an Ironworks")]
        public virtual void PlayerPlayIronworksAndGainsAnIronworks()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player play Ironworks and gains an Ironworks", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
testRunner.Given("A new game with 3 players");
#line 28
testRunner.And("Ironworks is available to buy");
#line 29
testRunner.And("Player1 has a Ironworks in hand instead of a Copper");
#line 30
testRunner.When("Player1 plays a Ironworks");
#line 31
testRunner.When("Player1 gains an Ironworks");
#line 32
testRunner.Then("Player1 should have a Ironworks on top of the discard pile");
#line 33
testRunner.And("Player1 should have 1 action remaining");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player play Ironworks and gains a GreatHall")]
        public virtual void PlayerPlayIronworksAndGainsAGreatHall()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player play Ironworks and gains a GreatHall", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
testRunner.Given("A new game with 3 players");
#line 37
testRunner.And("GreatHall is available to buy");
#line 38
testRunner.And("Player1 has a Ironworks in hand instead of a Copper");
#line 39
testRunner.When("Player1 plays a Ironworks");
#line 40
testRunner.When("Player1 gains a GreatHall");
#line 41
testRunner.Then("Player1 should have a GreatHall on top of the discard pile");
#line 42
testRunner.And("Player1 should have 1 action remaining");
#line 43
testRunner.And("Player1 should have 5 cards in hand");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
