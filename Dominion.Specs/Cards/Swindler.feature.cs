// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Cards
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Swindler")]
    public partial class SwindlerFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Swindler.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Swindler", "", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Swindler and must choose what card the opponent gains")]
        public virtual void PlayerPlaysSwindlerAndMustChooseWhatCardTheOpponentGains()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Swindler and must choose what card the opponent gains", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line 4
testRunner.Given("A new game with 2 players and bank of Familiar, Militia, Smithy, Village, Cellar," +
                    " Swindler, Market, Festival, Witch, Moat");
#line 5
testRunner.And("Player1 has a Swindler in hand instead of a Copper");
#line 6
testRunner.And("Player2 has a deck of Estate, Copper, Estate, Copper, Copper");
#line 7
testRunner.When("Player1 plays a Swindler");
#line 8
testRunner.Then("Player1 must select a card of cost 2 for Player2 to gain");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Swindler and select a card for the opponent to gain")]
        public virtual void PlayerPlaysSwindlerAndSelectACardForTheOpponentToGain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Swindler and select a card for the opponent to gain", ((string[])(null)));
#line 10
this.ScenarioSetup(scenarioInfo);
#line 11
testRunner.Given("A new game with 2 players and bank of Familiar, Militia, Smithy, Village, Cellar," +
                    " Swindler, Market, Festival, Witch, Moat");
#line 12
testRunner.And("Player1 has a Swindler in hand instead of a Copper");
#line 13
testRunner.And("Player2 has a deck of Moat, Copper, Estate, Copper, Copper");
#line 14
testRunner.When("Player1 plays a Swindler");
#line 15
testRunner.And("Player1 selects a Estate for Player2 to gain");
#line 16
testRunner.Then("There should be a Moat on top of the trash pile");
#line 17
testRunner.And("Player2 should have a Estate on top of the discard pile");
#line 18
testRunner.And("Player2 should have a deck of: Copper, Estate, Copper, Copper");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Swindler but there is only one possible card to gain")]
        public virtual void PlayerPlaysSwindlerButThereIsOnlyOnePossibleCardToGain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Swindler but there is only one possible card to gain", ((string[])(null)));
#line 20
this.ScenarioSetup(scenarioInfo);
#line 21
testRunner.Given("A new game with 2 players and bank of Familiar, Militia, Smithy, Village, Cellar," +
                    " Swindler, Market, Festival, Witch, Moat");
#line 22
testRunner.And("Player1 has a Swindler in hand instead of a Copper");
#line 23
testRunner.And("Player2 has a deck of Familiar, Copper, Estate, Copper, Copper");
#line 24
testRunner.When("Player1 plays a Swindler");
#line 25
testRunner.Then("There should be a Familiar on top of the trash pile");
#line 26
testRunner.And("Player2 should have a Familiar on top of the discard pile");
#line 27
testRunner.And("Player2 should have a deck of: Copper, Estate, Copper, Copper");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Swindler but opponent has no deck so it is just +2 money")]
        public virtual void PlayerPlaysSwindlerButOpponentHasNoDeckSoItIsJust2Money()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Swindler but opponent has no deck so it is just +2 money", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
testRunner.Given("A new game with 2 players and bank of Familiar, Militia, Smithy, Village, Cellar," +
                    " Swindler, Market, Festival, Witch, Moat");
#line 31
testRunner.And("Player1 has a Swindler in hand instead of a Copper");
#line 32
testRunner.And("Player2 has an empty deck");
#line 33
testRunner.When("Player1 plays a Swindler");
#line 34
testRunner.Then("Player1 should have 2 to spend");
#line 35
testRunner.And("All actions should be resolved");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Swindler but there are no cards of appropriate cost to gain")]
        public virtual void PlayerPlaysSwindlerButThereAreNoCardsOfAppropriateCostToGain()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Swindler but there are no cards of appropriate cost to gain", ((string[])(null)));
#line 37
this.ScenarioSetup(scenarioInfo);
#line 38
testRunner.Given("A new game with 2 players and bank of Familiar, Militia, Smithy, Village, Cellar," +
                    " Swindler, Market, Festival, Witch, Moat");
#line 39
testRunner.And("Player1 has a Swindler in hand instead of a Copper");
#line 40
testRunner.And("Player2 has a deck of Golem, Copper, Estate, Copper, Copper");
#line 41
testRunner.When("Player1 plays a Swindler");
#line 42
testRunner.Then("There should be a Golem on top of the trash pile");
#line 43
testRunner.And("Player2 should have 0 cards in the discard pile");
#line 44
testRunner.And("Player2 should have a deck of: Copper, Estate, Copper, Copper");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player plays Swindler with multiple opponents")]
        public virtual void PlayerPlaysSwindlerWithMultipleOpponents()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player plays Swindler with multiple opponents", ((string[])(null)));
#line 46
this.ScenarioSetup(scenarioInfo);
#line 47
testRunner.Given("A new game with 3 players and bank of Familiar, Militia, Smithy, Village, Cellar," +
                    " Swindler, Market, Festival, Witch, Moat");
#line 48
testRunner.And("Player1 has a Swindler in hand instead of a Copper");
#line 49
testRunner.And("Player2 has a deck of Copper, Copper, Estate, Copper, Copper");
#line 50
testRunner.And("Player3 has a deck of Copper, Copper, Estate, Copper, Copper");
#line 51
testRunner.When("Player1 plays a Swindler");
#line 52
testRunner.And("Player1 selects a Curse for Player2 to gain");
#line 53
testRunner.Then("Player1 must select a card of cost 0 for Player3 to gain");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Information on Swindle")]
        [NUnit.Framework.CategoryAttribute("Hosted")]
        public virtual void InformationOnSwindle()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Information on Swindle", new string[] {
                        "Hosted"});
#line 56
this.ScenarioSetup(scenarioInfo);
#line 57
testRunner.Given("A new hosted game with 2 players");
#line 58
testRunner.And("Player1 has a Swindler in hand instead of a Copper");
#line 59
testRunner.When("The game begins");
#line 60
testRunner.And("Player1 tells the host to play Swindler");
#line 61
testRunner.Then("Player1\'s current activity should have a type of SelectPile");
#line 62
testRunner.Then("Player1\'s current activity should have a hint of OpponentGainCards");
#line 63
testRunner.Then("Player1\'s current activity should have a source of Swindler");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
