// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Hosted
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Game View")]
    public partial class GameViewFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GameView.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Game View", "In order to play Dominion\r\nAs a Dominion player\r\nI need information about the gam" +
                    "e state", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Determine the types of the cards in hand")]
        public virtual void DetermineTheTypesOfTheCardsInHand()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Determine the types of the cards in hand", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("A new hosted game with 3 players");
#line 8
testRunner.And("Player1 has a hand of GreatHall, Witch, Moat, Curse, Copper");
#line 9
testRunner.When("The game begins");
#line 10
testRunner.Then("Player1\'s view includes a GreatHall in hand with types Action and Victory");
#line 11
testRunner.And("Player1\'s view includes a Witch in hand with types Action and Attack");
#line 12
testRunner.And("Player1\'s view includes a Moat in hand with types Action and Reaction");
#line 13
testRunner.And("Player1\'s view includes a Curse in hand with the type Curse");
#line 14
testRunner.And("Player1\'s view includes a Copper in hand with the type Treasure");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Active player can buy card in buy step")]
        public virtual void ActivePlayerCanBuyCardInBuyStep()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Active player can buy card in buy step", ((string[])(null)));
#line 16
this.ScenarioSetup(scenarioInfo);
#line 17
testRunner.Given("A new hosted game with 3 players");
#line 18
testRunner.When("The game begins");
#line 19
testRunner.Then("Player1\'s view includes a Copper in the bank that can be bought");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non active players cannot buy anything")]
        public virtual void NonActivePlayersCannotBuyAnything()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non active players cannot buy anything", ((string[])(null)));
#line 21
this.ScenarioSetup(scenarioInfo);
#line 22
testRunner.Given("A new hosted game with 3 players");
#line 23
testRunner.When("The game begins");
#line 24
testRunner.Then("Player2\'s view includes nothing in the bank that can be bought");
#line 25
testRunner.Then("Player3\'s view includes nothing in the bank that can be bought");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Active player cannot buy card if in action step")]
        public virtual void ActivePlayerCannotBuyCardIfInActionStep()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Active player cannot buy card if in action step", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 28
testRunner.Given("A new hosted game with 3 players");
#line 29
testRunner.And("Player1 has a Militia in hand instead of a Copper");
#line 30
testRunner.When("The game begins");
#line 31
testRunner.Then("Player1\'s view includes nothing in the bank that can be bought");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Active player can play card in action step")]
        public virtual void ActivePlayerCanPlayCardInActionStep()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Active player can play card in action step", ((string[])(null)));
#line 33
this.ScenarioSetup(scenarioInfo);
#line 34
testRunner.Given("A new hosted game with 3 players");
#line 35
testRunner.And("Player1 has a Militia in hand instead of a Copper");
#line 36
testRunner.When("The game begins");
#line 37
testRunner.Then("Player1\'s view includes a Militia in hand that can be played");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Non active players cannot play anything")]
        public virtual void NonActivePlayersCannotPlayAnything()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Non active players cannot play anything", ((string[])(null)));
#line 39
this.ScenarioSetup(scenarioInfo);
#line 40
testRunner.Given("A new hosted game with 3 players");
#line 41
testRunner.And("Player2 has a Militia in hand instead of a Copper");
#line 42
testRunner.And("Player3 has a Militia in hand instead of a Copper");
#line 43
testRunner.When("The game begins");
#line 44
testRunner.Then("Player2\'s view includes nothing in hand that can be played");
#line 45
testRunner.Then("Player3\'s view includes nothing in hand that can be played");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Active player cannot play card if in buy step")]
        public virtual void ActivePlayerCannotPlayCardIfInBuyStep()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Active player cannot play card if in buy step", ((string[])(null)));
#line 47
this.ScenarioSetup(scenarioInfo);
#line 48
testRunner.Given("A new hosted game with 3 players");
#line 49
testRunner.And("Player1 has a Militia in hand instead of a Copper");
#line 50
testRunner.When("The game begins");
#line 51
testRunner.When("Player1 tells the host to move to the buy step");
#line 52
testRunner.Then("Player1\'s view includes nothing in hand that can be played");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("View deck at the game end")]
        public virtual void ViewDeckAtTheGameEnd()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("View deck at the game end", ((string[])(null)));
#line 54
this.ScenarioSetup(scenarioInfo);
#line 55
testRunner.Given("A new hosted game with 3 players");
#line 56
testRunner.But("There is only 1 Province left");
#line 57
testRunner.And("Player1 has a hand of all Gold");
#line 58
testRunner.When("The game begins");
#line 59
testRunner.And("Player1 tells the host to buy Province");
#line 60
testRunner.Then("Player1\'s view of the play area should start with this sequence of cards: Provinc" +
                    "e");
#line 61
testRunner.Then("Player2\'s view of the play area should start with this sequence of cards: Estate");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Player with pending reveal cards action can see the revealed cards")]
        public virtual void PlayerWithPendingRevealCardsActionCanSeeTheRevealedCards()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Player with pending reveal cards action can see the revealed cards", ((string[])(null)));
#line 63
this.ScenarioSetup(scenarioInfo);
#line 64
testRunner.Given("A new hosted game with 3 players");
#line 65
testRunner.And("Player1 has a Thief in hand instead of a Copper");
#line 66
testRunner.And("Player2 has a deck of Silver, Copper, Estate, Copper, Copper");
#line 67
testRunner.And("Player3 has a deck of Gold, Copper, Estate, Copper, Copper");
#line 68
testRunner.When("The game begins");
#line 69
testRunner.And("Player1 tells the host to play Thief");
#line 70
testRunner.Then("Player1\'s view includes Silver, Copper in the revealed zone");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
