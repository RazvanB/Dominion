// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Hosted
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Automatic Progression")]
    public partial class AutomaticProgressionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AutomaticProgression.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Automatic Progression", "In order to speed up gameplay\r\nAs a dominion player\r\nI want the game state to adv" +
                    "ance automatically when there are no possible actions", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Immediately move to buy step when no actions")]
        public virtual void ImmediatelyMoveToBuyStepWhenNoActions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Immediately move to buy step when no actions", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("A new hosted game with 3 players");
#line 8
testRunner.And("I am going first");
#line 9
testRunner.When("The game begins");
#line 10
testRunner.Then("I should be in my buy step");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Allow player to play actions")]
        public virtual void AllowPlayerToPlayActions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Allow player to play actions", ((string[])(null)));
#line 12
this.ScenarioSetup(scenarioInfo);
#line 13
testRunner.Given("A new hosted game with 3 players");
#line 14
testRunner.And("I am going first");
#line 15
testRunner.And("I have a Smithy in hand instead of a Copper");
#line 16
testRunner.When("The game begins");
#line 17
testRunner.Then("I should have 1 remaining action");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Automatic progression when previous player uses their buys and current player has" +
            " no actions")]
        public virtual void AutomaticProgressionWhenPreviousPlayerUsesTheirBuysAndCurrentPlayerHasNoActions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automatic progression when previous player uses their buys and current player has" +
                    " no actions", ((string[])(null)));
#line 19
this.ScenarioSetup(scenarioInfo);
#line 20
testRunner.Given("A new hosted game with 3 players");
#line 21
testRunner.And("I am going first");
#line 22
testRunner.When("The game begins");
#line 23
testRunner.And("Player1 tells the host to buy Copper");
#line 24
testRunner.Then("Player2 should be in the buy step");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Automatic progression when using 1 of 2 buys")]
        public virtual void AutomaticProgressionWhenUsing1Of2Buys()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automatic progression when using 1 of 2 buys", ((string[])(null)));
#line 26
this.ScenarioSetup(scenarioInfo);
#line 27
testRunner.Given("A new hosted game with 3 players");
#line 28
testRunner.And("I am going first");
#line 29
testRunner.And("I have a Woodcutter in hand instead of a Copper");
#line 30
testRunner.When("The game begins");
#line 31
testRunner.And("Player1 tells the host to play Woodcutter");
#line 32
testRunner.And("Player1 tells the host to buy Copper");
#line 33
testRunner.Then("Player1 should be in the buy step");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Automatic progression when using 2 of 2 buys")]
        public virtual void AutomaticProgressionWhenUsing2Of2Buys()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automatic progression when using 2 of 2 buys", ((string[])(null)));
#line 35
this.ScenarioSetup(scenarioInfo);
#line 36
testRunner.Given("A new hosted game with 3 players");
#line 37
testRunner.And("I am going first");
#line 38
testRunner.And("I have a Woodcutter in hand instead of a Copper");
#line 39
testRunner.When("The game begins");
#line 40
testRunner.And("Player1 tells the host to play Woodcutter");
#line 41
testRunner.And("Player1 tells the host to buy Copper");
#line 42
testRunner.And("Player1 tells the host to buy Copper");
#line 43
testRunner.Then("Player2 should be in the buy step");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Automatic progression at the game end")]
        public virtual void AutomaticProgressionAtTheGameEnd()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automatic progression at the game end", ((string[])(null)));
#line 45
this.ScenarioSetup(scenarioInfo);
#line 46
testRunner.Given("A new hosted game with 3 players");
#line 47
testRunner.But("There is only 1 Province left");
#line 48
testRunner.And("I am going first");
#line 49
testRunner.And("I have a hand of all Gold");
#line 50
testRunner.When("The game begins");
#line 51
testRunner.And("Player1 tells the host to buy Province");
#line 52
testRunner.Then("The game should have ended");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
