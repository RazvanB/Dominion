// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.3.5.2
//      Runtime Version:4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
namespace Dominion.Specs.Hosted
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.3.5.2")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Automatic Reaction")]
    public partial class AutomaticReactionFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AutomaticReaction.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Automatic Reaction", "In order to speed up gameplay\r\nAs a dominion player\r\nI want my reaction to automa" +
                    "tically be played when attacked", ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Automatically react with moat")]
        public virtual void AutomaticallyReactWithMoat()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automatically react with moat", ((string[])(null)));
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
testRunner.Given("A new hosted game with 3 players");
#line 8
testRunner.And("Player1 has a Militia in hand instead of a Copper");
#line 9
testRunner.And("Player2 has a Moat in hand instead of a Copper");
#line 10
testRunner.When("Player1 tells the host to play Militia");
#line 11
testRunner.Then("Player2 must wait");
#line 12
testRunner.And("Player3 must select 2 cards to discard");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Automatically react when holding multiples of same reaction")]
        public virtual void AutomaticallyReactWhenHoldingMultiplesOfSameReaction()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automatically react when holding multiples of same reaction", ((string[])(null)));
#line 14
this.ScenarioSetup(scenarioInfo);
#line 15
testRunner.Given("A new hosted game with 3 players");
#line 16
testRunner.And("Player1 has a Militia in hand instead of a Copper");
#line 17
testRunner.And("Player2 has a hand of Moat, Moat, Copper, Copper, Copper");
#line 18
testRunner.When("Player1 tells the host to play Militia");
#line 19
testRunner.Then("Player2 must wait");
#line 20
testRunner.And("Player3 must select 2 cards to discard");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Do not automatically react when holding different reactions")]
        public virtual void DoNotAutomaticallyReactWhenHoldingDifferentReactions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Do not automatically react when holding different reactions", ((string[])(null)));
#line 22
this.ScenarioSetup(scenarioInfo);
#line 23
testRunner.Given("A new hosted game with 3 players");
#line 24
testRunner.And("Player1 has a Militia in hand instead of a Copper");
#line 25
testRunner.And("Player2 has a hand of SecretChamber, Moat, Copper, Copper, Copper");
#line 26
testRunner.When("Player1 tells the host to play Militia");
#line 27
testRunner.Then("Player2 may reveal a reaction");
#line hidden
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Automatically pass if a Player uses Secret Chamber and puts it on top, leaving no" +
            " other reactions")]
        public virtual void AutomaticallyPassIfAPlayerUsesSecretChamberAndPutsItOnTopLeavingNoOtherReactions()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Automatically pass if a Player uses Secret Chamber and puts it on top, leaving no" +
                    " other reactions", ((string[])(null)));
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
testRunner.Given("A new hosted game with 3 players");
#line 31
testRunner.And("Player1 has a Militia in hand instead of a Copper");
#line 32
testRunner.And("Player2 has a hand of SecretChamber, Copper, Copper, Copper, Estate");
#line 33
testRunner.When("Player1 tells the host to play Militia");
#line 34
testRunner.And("Player2 tells the host to reveal SecretChamber");
#line 35
testRunner.And("Player2 tells the host to put SecretChamber on top");
#line 36
testRunner.And("Player2 tells the host to put Copper on top");
#line 37
testRunner.Then("Player2 must select 2 cards to discard");
#line hidden
            testRunner.CollectScenarioErrors();
        }
    }
}
#endregion
